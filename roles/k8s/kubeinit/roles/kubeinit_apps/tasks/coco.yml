---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Deploy and test CoCo
  block:
    - name: Create the CoCo workload template file
      ansible.builtin.template:
        src: "coco_workload.yml.j2"
        dest: "~/coco_workload.yml"
        mode: "0755"

    - name: Deploy the CoCo operator
      ansible.builtin.shell: |
        set -o pipefail
        yum install -y git
        kubectl apply -k github.com/confidential-containers/operator/config/release?ref={{ kubeinit_apps_coco_version }}
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      delegate_to: "{{ kubeinit_provision_service_node }}"

    - name: Wait until the CoCo pod is running
      ansible.builtin.shell: |
        set -o pipefail
        kubectl get pods -n confidential-containers-system | grep Running | head -n 1
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      retries: 60
      delay: 5
      until: _result.stdout_lines | list | length == 1
      delegate_to: "{{ kubeinit_provision_service_node }}"

    - name: Deploy the CoCo runtime
      ansible.builtin.shell: |
        set -o pipefail
        kubectl apply -k github.com/confidential-containers/operator/config/samples/ccruntime/default?ref={{ kubeinit_apps_coco_version }}
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      delegate_to: "{{ kubeinit_provision_service_node }}"

    - name: Wait until the kata runtime class is up
      ansible.builtin.shell: |
        set -o pipefail
        kubectl get runtimeclass | grep kata | head -n 1
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      retries: 60
      delay: 5
      until: _result.stdout_lines | list | length == 1
      delegate_to: "{{ kubeinit_provision_service_node }}"

    - name: Deploy a CoCo workload
      ansible.builtin.shell: |
        set -o pipefail
        kubectl apply -f coco_workload.yml
        # kubectl get pod -o custom-columns=NAME:metadata.name,STATUS:.status.phase,RUNTIME_CLASS:.spec.runtimeClassName
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      delegate_to: "{{ kubeinit_provision_service_node }}"
